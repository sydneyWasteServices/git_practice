
report position

     # Format Report Headers
    # date index / date string or date object
    def format_headers(self, wb, ws_name: str, date="dd/mm/yyyy"):
        report_title = wb.sheets[ws_name].range('A1')


        report_date = wb.sheets[ws_name].range('A2')

        report_title.value = f"Weekly Financial Management Report - {ws_name}"


        report_date.value = f"Start at : {date}"

        report_title.api.Font.Size = 13

        report_date.api.Font.Size = 13
        report_title.api.Font.Bold = True
        
        report_date.api.Font.Bold = True




        
    def format_ws_font_style_to_arial(self, wb, ws_name: str):
        ws = wb.sheets[ws_name]
        ws.range("A:DA").api.Font.Name = "Arial"



#  Create worksheets for the workbooks
     # wb as xlwings workbook, list_of_route - List of str
    def create_and_name_ws_by_routes(self, wb, list_of_rev_types):
        num_rev_types = len(list_of_rev_types)
        num_sheets = len(wb.sheets)

        if num_rev_types > num_sheets:
            add_num_sheets = num_rev_types - num_sheets
            for n in range(add_num_sheets):
                wb.sheets.add()

        for (i, rev_type) in enumerate(list_of_rev_types):
            wb.sheets[i].name = rev_type
/=====================================
    def get_trucks(self):
        pass

        # category income
    def get_income_by_rev_type(
            self,
            rev_type: str,
            date: str = "dd/mm/yy"):

        series = self.df.resample('7D', kind='period')
        series_by_date = series.get_group(date)

        if rev_type != "total":

            list_of_routes = self.get_routes(rev_type)

            df_by_rev_type = self.filter_df_by_rev_routes(
                series_by_date, list_of_routes)

            income_by_rev_type = df_by_rev_type.Price.sum()

        else:

            income_by_rev_type = series_by_date.Price.sum()

        return income_by_rev_type

    # returns dict route : key, income_figure : value

    def get_income_per_route_by_rev_type(self, rev_type: str, date: str = "dd/mm/yy"):
        series = self.df.resample('7D', kind='period')
        series_by_date = series.get_group(date)

        if rev_type != "total":
            list_of_routes = self.get_routes(rev_type)
            df_by_rev_type = self.filter_df_by_rev_routes(
                series_by_date, list_of_routes)
            income_per_route_by_rev_type = df_by_rev_type.groupby(
                'Route number').Price.sum()
        else:
            income_per_route_by_rev_type = series_by_date.groupby(
                'Route number').Price.sum()
        return income_per_route_by_rev_type

        # income_by_rev_type = df_by_rev_type.Price.sum()
        # return income_by_rev_type

    def get_income_by_truck(self, rev_type: str, date: str = "dd/mm/yy"):
        pass


# Temporary - try to build query for
class WE_income_items:
    def __init__(
            self,
            total: float,
            gw: float,
            cb: float,
            cm: float,
            sub: float,
            uos: float,
            fx: float = 0):
        self.total = total
        self.gw = gw
        self.cb = cb
        self.cm = cm
        self.sub = sub
        self.uos = uos
        self.fx = fx


# df_date = "2021-01-20"
# df_series = series.get_group(df_date)

# rop.create_and_name_ws_by_routes(wb, rev_types)
# [report_templates_horizontal(wb,rev_type,df_series,df_date) for rev_type in rev_types]


# /D/'Run Analysis'/WEEKLY_SUMMARY_from_January_2021/January_2021/Weekly_Summary


# [n for n, x in enumerate(lst) if 'abc' in x]
# ================================================================================
    # Temporary Display
#   anchor Cell in B4
    def display_rev_type_in_total_sheet(
            wb,
            rev_type_name: str,
            total_revenue: float = 0.00,
            anchor_cell: str = "B4"):

        # total sheet
        ws = wb.sheets["total"]
        anchor_cell_loc = ws.range(anchor_cell)
        # left 1 down 3 => start with it
        first_rev_type_title_cell = anchor_cell_loc.offset(
            row_offset=3, column_offset=1)

        # if has value down 1
        # When rev_type_title cell has value it moves down
        def check_empty_cell(
                rev_name: str,
                target_cell: object):
            #  starts from 0
            if target_cell.value is None:
                target_cell.value = rev_name
                return target_cell
            else:
                new_target_cell = target_cell.offset(row_offset=1)
                return check_empty_cell(rev_name, new_target_cell)

        target_rev_title = check_empty_cell(
            rev_type_name, first_rev_type_title_cell)

        # Left 5 => revenue amount
        rev_figure = target_rev_title.offset(column_offset=5)
        rev_figure.value = total_revenue

    # Format by Route number

    # Format by Truck number

    # Format by Bin Vol

    # Test offset
    # Test lIST Values in column



==================================================
Revnue attribute
# route: str,
# truck_num: str,
# Rev_type: Rev_type,
# source_csv_path: str,
# source_db_path: str
# self.route = route
# self.truck_num = truck_num
# self.waste_type = waste_type
# self.Rev_type = Rev_type
# self.source_csv_path = source_csv_path 
# self.source_db_path = source_db_path
==================================================



# wb workbook,   series resmapled data (by 7D)


# try catch on excel configuring
# =============================
# wb = xw.Book()
# rop.format_ws_font_style_to_arial(wb,"Sheet1")
# rop.format_headers(wb,"Sheet1")
# rop.format_left_columns(wb,"Sheet1")
# rop.format_report_content_total_income(wb,"Sheet1")
# rop.format_report_content_rev_by_route_num(wb,"Sheet1",[[1],[2],[3]],[[4],[5],[6]])
# =============================

# time.sleep(5)
# wb.close()
# df = wet.extract_weekday(df)
# df = wet.clean_route_num_column(df)
# rev_general_waste = rev.extract_by_rev_type_hardcode('general_waste')

# df = df[df['Route number'].isin(rev_general_waste)]

# df = wet.transform_date_format(df)

# df = df.sort_values(by=['Date'], inplace=True, ascending=False)


# series = df.resample('7D')
# 
# df_123 = series.get_group('2020-12-02')

# print(series.Price.sum())
# print(df)
# print(df)






# UOS =>  UOSCB	UOSCO	UOSGW	CMDCB	CMDGW	CUMCB	CUMGW	NEPGW
# Subcontractors => ALLMED	BIN	CKG	CLN	GRACE	JJR	OWE	REM	REP	REQ	RRNW	RRR	SHR	SPD	SUE	URM	VEO	VEOACT	VTG


# UOS =>  UOSCB	UOSCO	UOSGW	CMDCB	CMDGW	CUMCB	CUMGW	NEPGW
# Subcontractors => ALLMED	BIN	CKG	CLN	GRACE	JJR	OWE	REM	REP	REQ	RRNW	RRR	SHR	SPD	SUE	URM	VEO	VEOACT	VTG

